//Choose the bridge you want to use and delete the other one.
Bridge modbus:tcp:localhostTCP 
[ host="192.168.178.181", port=502, id=1, // IP Address is that of HUAWEI Inverter smart dongle (see in your router)
 connectMaxTries=1, //How many times we try to establish the connection. Should be at least 1.
 timeBetweenTransactionsMillis=3000, 
 afterConnectionDelayMillis=2000,
 reconnectAfterMillis=1000, //The connection is kept open at least the time specified here. Value of zero means that connection is disconnected after every MODBUS transaction. In milliseconds.
 //reconnectAfterMillis=0,
 timeBetweenReconnectMillis=3000
 

//rtuEncoded=false, //default: false
//connectMaxTries=1, //How many times we try to establish the connection. Should be at least 1.
//timeBetweenReconnectMillis=3000, //How long to wait to before trying to establish a new connection after the previous one has been disconnected. In milliseconds.
//connectTimeoutMillis=10000, //The maximum time that is waited when establishing the connection. Value of zero means that system/OS default is respected. In milliseconds.
// reconnectAfterMillis=10000, //The connection is kept open at least the time specified here. Value of zero means that connection is disconnected after every MODBUS transaction. In milliseconds.
// timeBetweenTransactionsMillis=500, //How long to delay we must have at minimum between two consecutive MODBUS transactions. In milliseconds.
// enableDiscovery=false, //Enable auto-discovery feature. Effective only if a supporting extension has been installed.
// afterConnectionDelayMillis=2000  // new parameter available in OH 3.3


 ]
 {

//    Bridge poller slave101holding [ start=30073, length=10, refresh=10000, type="holding" ]{
    
//         Thing data Rated_power                      [ readStart="30073", readValueType="uint32",readTransform="JS(divide1000.js)",updateUnchangedValuesEveryMillis="500000" ]
//         Thing data Maximum_active_power             [ readStart="30075", readValueType="uint32",readTransform="JS(divide1000.js)",updateUnchangedValuesEveryMillis="500000" ]
//         Thing data Maximum_apparent_power           [ readStart="30077", readValueType="uint32",readTransform="JS(divide1000.js)",updateUnchangedValuesEveryMillis="500000" ]
//         Thing data Maximum_reactive_power_fed       [ readStart="30079", readValueType="int32",readTransform="JS(divide1000.js)",updateUnchangedValuesEveryMillis="500000" ]
//         Thing data Maximum_reactive_power_absorbed  [ readStart="30081", readValueType="int32",readTransform="JS(divide1000.js)",updateUnchangedValuesEveryMillis="500000" ]

//    }
//    Bridge poller slave105holding [ start=32064, length=31, refresh=10000, type="holding" ]{
/*+++    Bridge poller slave105holding [ start=32080, length=2, refresh=10000, type="holding" ]{*/
    
//  	 Thing data Input_power                    [ readStart="32064", readValueType="int32",readTransform="JS(divide1000.js)",updateUnchangedValuesEveryMillis="500000" ]     
// 	 Thing data Uab                            [ readStart="32066", readValueType="uint16",readTransform="JS(divide10.js)",updateUnchangedValuesEveryMillis="500000" ]
// 	 Thing data Ubc                            [ readStart="32067", readValueType="uint16",readTransform="JS(divide10.js)",updateUnchangedValuesEveryMillis="500000" ]
// 	 Thing data Uca                            [ readStart="32068", readValueType="uint16",readTransform="JS(divide10.js)",updateUnchangedValuesEveryMillis="500000" ]
// 	 Thing data Ua                             [ readStart="32069", readValueType="uint16",readTransform="JS(divide10.js)",updateUnchangedValuesEveryMillis="500000" ]
// 	 Thing data Ub                             [ readStart="32070", readValueType="uint16",readTransform="JS(divide10.js)",updateUnchangedValuesEveryMillis="500000" ]
// 	 Thing data Uc                             [ readStart="32071", readValueType="uint16",readTransform="JS(divide10.js)",updateUnchangedValuesEveryMillis="500000" ]
// 	 Thing data La                             [ readStart="32072", readValueType="int32",readTransform="JS(divide1000.js)",updateUnchangedValuesEveryMillis="500000" ]
// 	 Thing data Lb                             [ readStart="32074", readValueType="int32",readTransform="JS(divide1000.js)",updateUnchangedValuesEveryMillis="500000" ]
// 	 Thing data Lc                             [ readStart="32076", readValueType="int32",readTransform="JS(divide1000.js)",updateUnchangedValuesEveryMillis="500000" ]
// 	 Thing data Active_peak_of_current_day     [ readStart="32078", readValueType="int32",readTransform="JS(divide1000.js)",updateUnchangedValuesEveryMillis="500000" ]
/* 	 Thing data Active_power                   [ readStart="32080", readValueType="int32",readTransform="JS(divide1000.js)",updateUnchangedValuesEveryMillis="60000" ]*/
// 	 Thing data Reactive_power                 [ readStart="32082", readValueType="int32",readTransform="JS(divide1000.js)",updateUnchangedValuesEveryMillis="500000" ]     
// 	 Thing data Power_factor                   [ readStart="32084", readValueType="int16",readTransform="JS(divide1000.js)",updateUnchangedValuesEveryMillis="500000" ]
// 	 Thing data Frequency                      [ readStart="32085", readValueType="uint16",readTransform="JS(divide100.js)",updateUnchangedValuesEveryMillis="500000" ] 
// 	 Thing data Inverter_efficiency            [ readStart="32086", readValueType="uint16",readTransform="JS(divide100.js)",updateUnchangedValuesEveryMillis="500000" ]
// 	 Thing data Cabinet_temperature            [ readStart="32087", readValueType="int16",readTransform="JS(divide10.js)",updateUnchangedValuesEveryMillis="500000" ]
// 	 Thing data Insulation_resistance          [ readStart="32088", readValueType="uint16",readTransform="JS(divide1000.js)",updateUnchangedValuesEveryMillis="500000" ]
// 	 Thing data Device_status                  [ readStart="32089", readValueType="uint16",updateUnchangedValuesEveryMillis="500000" ]
// 	 Thing data Fault_code                     [ readStart="32090", readValueType="uint16",updateUnchangedValuesEveryMillis="500000" ]
// 	 Thing data Start_up_time                  [ readStart="32091", readValueType="uint32",readTransform="JS(divide1.js)",updateUnchangedValuesEveryMillis="500000" ]
// 	 Thing data Shutdown_time                  [ readStart="32093", readValueType="uint32",readTransform="JS(divide1.js)",updateUnchangedValuesEveryMillis="500000" ]

/*+++}*/

Bridge poller Active_power_poller [ start=32080, length=2, refresh=60000, type="holding" ]{
 	 Thing data Active_power  [ readStart="32080", readValueType="int32",readTransform="JS(divide1000.js)",updateUnchangedValuesEveryMillis="60000" ]
}


Bridge poller PV_Volt_poller [ start=32016, length=1, refresh=30000, type="holding" ]{
     Thing data Pv_1_Voltage  [ readStart="32016", readValueType="int16",readTransform="JS(divide10.js)",  updateUnchangedValuesEveryMillis="30000" ]
}
Bridge poller PV_Curr_poller [ start=32017, length=1, refresh=30000, type="holding" ]{    
        Thing data Pv_1_Current  [ readStart="32017", readValueType="int16",readTransform="JS(divide100.js)", updateUnchangedValuesEveryMillis="30000" ]        
}

// Bridge poller slave108holding [ start=40122, length=1, refresh=10000, type="holding" ]{
  
//     Thing data Reactive_power_compensation_pf [ readStart="40122", readValueType="int16",readTransform="JS(divide1000.js)",updateUnchangedValuesEveryMillis="5000000" ]     
//     Thing data Reactive_power_compensation_qs [ readStart="40123", readValueType="int16",readTransform="JS(divide1000.js)",updateUnchangedValuesEveryMillis="500000" ]
//     Thing data Active_power_derating_percent  [ readStart="40125", readValueType="uint16",readTransform="JS(divide10.js)",updateUnchangedValuesEveryMillis="500000" ]
//     Thing data Active_power_derating_fixed    [ readStart="40126", readValueType="uint32",readTransform="JS(divide1.js)",updateUnchangedValuesEveryMillis="500000" ]
// }

    
Bridge poller E_total_poller [ start=32106, length=2, refresh=500000, type="holding" ]{
    
        Thing data E_total  [ readStart="32106", readValueType="uint32",readTransform="JS(divide100.js)",updateUnchangedValuesEveryMillis="500000" ]
    }    

Bridge poller E_day_poller [ start=32114, length=2, refresh=500000, type="holding" ]{                    
		Thing data E_day [ readStart="32114", readValueType="uint32",readTransform="JS(divide100.js)",updateUnchangedValuesEveryMillis="500000" ]  
    }
Bridge poller SOC_poller [ start=37004, length=1, refresh=300000, type="holding" ]{            
        
        Thing data SOC [ readStart="37004", readValueType="uint16",readTransform="JS(divide10_SOC.js)",updateUnchangedValuesEveryMillis="300000" ]  
    }
    
	// Bridge poller powermeter1 [ start=37101, length=12, refresh=10000, type="holding" ]{
	// 	Thing data Volt_A   [ readStart="37101", readValueType="uint32",readTransform="JS(divide10.js)",updateUnchangedValuesEveryMillis="500000" ]     
	// 	Thing data Volt_B   [ readStart="37103", readValueType="uint32",readTransform="JS(divide10.js)",updateUnchangedValuesEveryMillis="500000" ]     
	// 	Thing data Volt_C   [ readStart="37105", readValueType="uint32",readTransform="JS(divide10.js)",updateUnchangedValuesEveryMillis="500000" ]     
	// 	Thing data Current_A   [ readStart="37107", readValueType="int32",readTransform="JS(divide100.js)",updateUnchangedValuesEveryMillis="60000" ]     
	// 	Thing data Current_B   [ readStart="37109", readValueType="int32",readTransform="JS(divide100.js)",updateUnchangedValuesEveryMillis="60000" ]     
	// 	Thing data Current_C   [ readStart="37111", readValueType="int32",readTransform="JS(divide100.js)",updateUnchangedValuesEveryMillis="60000" ]     
	// }        
	
	Bridge poller powermeter_powerA [ start=37132, length=2, refresh=60000, type="holding" ]{
		Thing data Power_A   [ readStart="37132", readValueType="int32",readTransform="JS(divide1.js)",updateUnchangedValuesEveryMillis="60000" ]     
	}        
	Bridge poller powermeter_powerB [ start=37134, length=2, refresh=60000, type="holding" ]{
		Thing data Power_B   [ readStart="37134", readValueType="int32",readTransform="JS(divide1.js)",updateUnchangedValuesEveryMillis="60000" ]     
	}        
	Bridge poller powermeter_powerC [ start=37136, length=2, refresh=60000, type="holding" ]{
		Thing data Power_C   [ readStart="37136", readValueType="int32",readTransform="JS(divide1.js)",updateUnchangedValuesEveryMillis="60000" ]     
	}           

    Bridge poller powermeter_grid_power [ start=37113, length=2, refresh=60000, type="holding" ]{
		Thing data Grid_power [ readStart="37113", readValueType="int32",readTransform="JS(divide1000.js)",updateUnchangedValuesEveryMillis="60000" ]
    }
 }
