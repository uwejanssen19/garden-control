// Tasmota Software on OBI Socket ("OBI Socket 2")
Thing mqtt:topic:myUnsecureBroker:carcharge_thing (mqtt:broker:myUnsecureBroker) 
[ availabilityTopic="tele/carcharge/LWT", payloadAvailable="Online", payloadNotAvailable="Offline" ] {
Channels:
         Type switch : carcharge_switch
         [stateTopic="stat/carcharge/POWER", commandTopic="cmnd/carcharge/POWER",allowedStates="ON,OFF"]  
         // Tasmota Status
        Type string : Version      [stateTopic="stat/carcharge/STATUS2", transformationPattern="JSONPATH:$.StatusFWR.Version"]
        Type switch : Reachable    [stateTopic="tele/carcharge/LWT",     transformationPattern="MAP:tasmota-reachable.map"]

        // Diagnostics: Define specific for what you really need on a regular basis, use standalone MQTT client for troubleshooting
        Type string : RestartReason [stateTopic="tele/carcharge/INFO3", transformationPattern="JSONPATH:$.Info3.RestartReason"]
        // old one, have to query it
        Type string : Version2      [stateTopic="stat/carcharge/STATUS2", transformationPattern="JSONPATH:$.StatusFWR.Version"]
        // new one - comes for free at startup
        Type string : Version       [stateTopic="tele/carcharge/INFO1", transformationPattern="JSONPATH:$.Info1.Version"]
        Type number : RSSI          [stateTopic="tele/carcharge/STATE", transformationPattern="JSONPATH:$.Wifi.RSSI"]
        Type string : WifiDowntime  [stateTopic="tele/carcharge/STATE", transformationPattern="JSONPATH:$.Wifi.Downtime"]
        Type number : LoadAvg       [stateTopic="tele/carcharge/STATE", transformationPattern="JSONPATH:$.LoadAvg"]
        Type number : Uptime        [stateTopic="tele/carcharge/STATE", transformationPattern="JSONPATH:$.UptimeSec"]
        Type string : Result        [stateTopic="stat/carcharge/RESULT"]
   
 }
