// Description: Rules and procedures for updating water level and filling for next irrigation
// Author: Uwe Janssen
// Created: 5.9.2019
// -----------------------------------------------------------------------------
// History of changes
// Date       |  Change                                            | Author
// -----------------------------------------------------------------------------
// 05.09.2019 | Creation                                           | Janssen
// 07.09.2019 | Bugfix                                             | Janssen
// -----------------------------------------------------------------------------
// import java.util.Map

// -----------------------------------------------------------------------------
// constants
// -----------------------------------------------------------------------------
val String LEVEL_EMPTY = "1"
val String SCRIPT_DIR="/home/pi/scripts/"
val MAX_FILL_BARREL_TIME = 180

// -----------------------------------------------------------------------------
//  Functions and procedures section
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
//  Function shallIrrigate
// -----------------------------------------------------------------------------

val Functions$Function0<Boolean> shallIrrigate = [ 
  // if switch is = ON OR either not raining or coming rain less than defined amount
  logDebug("shallIrrigate:","LocalCurrentRainVolume = {}", LocalCurrentRainVolume.state)
  logDebug("shallIrrigate:","ForecastRainVolumesGroup = {}", ForecastRainVolumesGroup.state)
  // logDebug("shallIrrigate::","IgnoreWeatherSwitch = {}", IgnoreWeatherSwitch.state)
  
  val isRaining = isRaining_out.state.toString
  logDebug("shallIrrigate::","isRaining_out is = {}", isRaining)
  //val currentRainVal = (LocalCurrentRainVolume?.state as DecimalType).floatValue
  // logDebug("shallIrrigate::","currentRainVal = {}", currentRainVal)
  var float comingRainVal  = (ForecastRainVolumesGroup?.state as DecimalType).floatValue
  // logDebug("shallIrrigate::","comingRainVal = {}", comingRainVal)

  val Boolean switchStateSetToIgnore  = (IgnoreWeatherSwitch?.state == ON)
    
  val Number RAIN_TRESHOLD = 3.0
  val Boolean willNotRain = (comingRainVal < RAIN_TRESHOLD)  
//  val Boolean isNotRaining = (currentRainVal == 0.0)    
  val Boolean isNotRaining = (isRaining == "0")
  val Boolean weatherSuitableForIrrigating  =  (isNotRaining && willNotRain)
    
  logDebug("shallIrrigate::","switchStateSetToIgnore = {} ",switchStateSetToIgnore)
  // logDebug("shallIrrigate::","comingRainVal = {} ",comingRainVal)
  // logDebug("shallIrrigate::","willNotRain = {} ",willNotRain)
  logDebug("shallIrrigate:","isNotRaining = {} ",isNotRaining)
  logDebug("shallIrrigate:","weatherSuitableForIrrigating = {} ",weatherSuitableForIrrigating)
    
  if (switchStateSetToIgnore || weatherSuitableForIrrigating) {
    logDebug("shallIrrigate:","return true")
    return true
  }
  else {
    logDebug("shallIrrigate:","return false")
    return false 
  }
  
   
]
// -----------------------------------------------------------------------------
//  Timer onFillTimer
// -----------------------------------------------------------------------------

val Procedures$Procedure0 onFillTimer = [ 
        FillTimerActive.postUpdate(OFF)
        logDebug("", "onFillTimer expired")
        water_on_off.sendCommand("0")
        Fill_Switch.postUpdate(OFF)
]

// -----------------------------------------------------------------------------
//  lambda readLevel>
// -----------------------------------------------------------------------------

val readLevel = [ 
  String SCRIPT_DIR, Boolean powerOff
  |
  logDebug("Read level", "readLevel invoked with par = {}",SCRIPT_DIR)
  GardencontrolPowerSupply.sendCommand(ON) // activate PowerSupply for pump and valve
  Thread::sleep(2000)
  var level = executeCommandLine(SCRIPT_DIR+"Level.sh", 6000)
  logDebug("", "readLevel() result = {}",level)
  if (powerOff) {
    GardencontrolPowerSupply.sendCommand(OFF) // deactivate PowerSupply for pump and valve
  }
  // return value to caller
  level.toString
]

// -----------------------------------------------------------------------------
//  END Functions & Procedures
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
//  Trigger Update Water Level
// -----------------------------------------------------------------------------

rule "Update Water Level Switch"
when 
  Item UpdateLevelSwitch received command
then 
  logDebug("", "Update Water Level Switch: ENTRY, UpdateLevelSwitch = {} ", receivedCommand)
  // just for test since we do not want to wait for some timer to occur
  if (receivedCommand == ON) {
    val willIrrigate = shallIrrigate.apply()
    logDebug("", "Update Water Level Switch: willIrrigate = {} ",willIrrigate)
    var level = readLevel.apply(SCRIPT_DIR, /*PowerOff = */true)
    //Display_level_out?.postUpdate(level) 
    Level_out.postUpdate(level.toString)
    StatusText.sendCommand("level = "+level)
    StatusText.sendCommand("wanAddress = "+wanAddress.state.toString)
    logDebug("", "WanAddress =  {} ",wanAddress)
  }
  logDebug("", "Update Level Switch: EXIT")
end

// -----------------------------------------------------------------------------
//  Fill barrel for next irrigation
// -----------------------------------------------------------------------------

rule "Fill barrel FNI"
// fill up barrel except when raining or rain has been forecast
  when Item Fill_Switch received command
  then
    logDebug("", "FILL barrel FNI: ENTRY received command = " + receivedCommand.toString)
    var String level = LEVEL_EMPTY

    switch(receivedCommand){
        case ON: {
          if (shallIrrigate.apply()) { // will irrigate
             logDebug("", "FILL barrel FNI: starting fill barrel cycle")
          
            FillTimerActive.postUpdate( ON )
            var maxTimer = createTimer (now.plusSeconds(MAX_FILL_BARREL_TIME), onFillTimer) // set time limit 
            while (level == LEVEL_EMPTY && FillTimerActive.state == ON) {
              logDebug("FILL barrel FNI"," INSIDE while loop since level is empty or filltimer active")
              GardencontrolPowerSupply.sendCommand(ON) // activate PowerSupply for pump and valve
              Thread::sleep(2000)
              water_on_off.sendCommand("1")
              level = readLevel.apply(SCRIPT_DIR,/* PowerOff = */false)
              logDebug("FILL barrel FNI"," level = " + level)
              if (level == "0" ) // 0=full 
              {
                logDebug("FILL barrel FNI"," Found barrel full")
                FillTimerActive.postUpdate(OFF)
                maxTimer?.cancel()
                Fill_Switch.postUpdate(OFF)
                water_on_off.sendCommand("0")
              } // full
              //logDebug("FILL barrel","START waiting 10 s")
              Thread::sleep(10000)
              //logDebug("FILL barrel","STOP waiting 10 s")
            } // end while
            logDebug("FILL barrel FNI"," END while loop since level is no longer empty or filltimer expired")
            maxTimer?.cancel()
          } else { // will not irrigate
             //if (LocalCurrentRainVolume.state > 0 || ForecastRainVolumesGroup.state >  DONT_IRRIGATE_BEYOND) {      
             logDebug("FILL barrel FNI"," NO refill, either raining ("+isRaining_out.state.toString+") or future rain = "+ForecastRainVolumesGroup.state)
             StatusText.postUpdate("FILL barrel NO refill due to weather, future rain = "+ForecastRainVolumesGroup.state)
          }  // end if rain condition

          Fill_Switch.postUpdate(OFF)
          Level_out.postUpdate(level.toString)


        } // end case ON
        case OFF: water_on_off.sendCommand("0")
        default: logError("", "FILL barrel I Do not know how to handle " + receivedCommand.toString)
    }
    GardencontrolPowerSupply.sendCommand(OFF) // deactivate PowerSupply for pump and valve

end
// -----------------------------------------------------------------------------
//  Irrigation ON
// -----------------------------------------------------------------------------

rule "Irrigation ON"
// time based beginning of irrigation
  when
    //Time cron "0 0/10 * * * ? " or // near future test 
    Time cron "0 00 05 * 4-8 ? " or
    Time cron "0 00 06 * 3-10 ? " or 
    Time cron "0 00 18 * 3-10 ? " or
    Time cron "0 00 19 * 4-8 ? "  
  then
    // { 
    // var Map <String, Map <Boolean,String>> irrigationMap = newHashMap()
    // val String TRUE_MAIL_TEXT  = "Irrigation via CRON: Bewaesserung: EIN \nWasserstand: "+Level_out.state.toString
    // val String FALSE_MAIL_TEXT = "Irrigation via CRON: KEINE Bewaesserung, es regnet oder für die nächsten 24 h ist Regen mit " + ForecastRainVolumesGroup.state + " angesagt "
    
    // irrigationMap.put("IRROFF", 
    //   newHashMap(
    //    false -> FALSE_MAIL_TEXT
    //    ) as Map<Boolean,String>
    //    )

    // irrigationMap.put("IRRON" , 
    //   newHashMap(
    //      true  -> TRUE_MAIL_TEXT
    //      ) as Map<Boolean,String>
    //   )
    // }
    var String linkText="IP = http://"+wanAddress.state.toString+":8080/basicui/app?sitemap=garden_control\nSONOFF Link = http://"+wanAddress.state.toString+":8066\n"
    // Irrigate except forecast tells otherwise
    logDebug("Irrigation ON"," ENTRY, isRaining = " + LocalCurrentRainVolume.state +", rainForeCast 24hrs  = "+ForecastRainVolumesGroup.state)
    if (shallIrrigate.apply() == true ) {
      GardencontrolPowerSupply.sendCommand(ON) // activate PowerSupply for pump and valve
      // trigger fill barrel rule,
      logDebug("", "Irrigation ON: turn on fill_switch")
      // tripping the fillswitch serves as a subroutine call here
      Fill_Switch.sendCommand(ON)
      Irr_Switch.postUpdate(ON)
      irr_on_off.sendCommand("1")
      Irrigating.sendCommand(ON)
      logDebug("Irrigation ON"," irrigating set to " + Irrigating.state.toString)
      sendMail("uwe@janssen-muenchen.de",
      "Bewaesserung", 
      "Bewaesserung findet statt.\n"+linkText+"Wasserstand: "+Level_out.state.toString)
    } else {
      Irr_Switch.postUpdate(OFF)
      irr_on_off.sendCommand("0")
      Irrigating.postUpdate(OFF)
      logDebug("Irrigation ON: NO irrigating , either raining"," ("+LocalCurrentRainVolume.state+", or future rain = "+ForecastRainVolumesGroup.state)
      sendMail("uwe@janssen-muenchen.de",
      "Keine Bewaesserung",
      "Bewaesserung.             \n"+linkText+"KEINE Bewaesserung, es regnet oder für die nächsten 24 h ist Regen mit " + ForecastRainVolumesGroup.state + " angesagt ")
    }
end


// -----------------------------------------------------------------------------
//  Irrigation OFF
// -----------------------------------------------------------------------------

rule "Irrigation OFF"
// time based ceasing of irrigation
  when
    //Time cron "0 5/10 * * * ? " or // near future test 
    Time cron "0 00 07 * 3-10 ? " or
    Time cron "0 00 19 * 3,9,10 ? " or
    Time cron "0 00 20 * 4-8 ? " 
  then   
    logDebug("", "Irrigation OFF: ENTRY, Cron event is due, stop irrigation")
    Irr_Switch.postUpdate(OFF)
    GardencontrolPowerSupply.sendCommand(OFF) // deactivate PowerSupply for pump and valve
    irr_on_off.sendCommand("0")
    Irrigating.postUpdate(OFF)
    sendMail("uwe@janssen-muenchen.de","Bewaesserung", "Bewaesserung: AUS \nWasserstand: "+Level_out.state.toString)
    logDebug("", "Irrigation OFF: EXIT")
end
// -----------------------------------------------------------------------------
//  WAN Address change
// -----------------------------------------------------------------------------

rule "WAN Address change"
  when
    Item wanAddress changed 
  then 
    var String linkText="IP = http://"+wanAddress.state.toString+":8080/basicui/app?sitemap=garden_control\nSONOFF Link = http://"+wanAddress.state.toString+":8066\n"
    logDebug("", "WAN Address change: "+linkText)
    sendMail("uwe@janssen-muenchen.de","WAN Address change", "New links available:\n"+linkText)
    logDebug("", "WAN Address change: EXIT")
end
