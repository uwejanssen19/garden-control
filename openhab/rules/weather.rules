// Description: Rules for irrigation and water supply control 
// Author: Uwe Janssen
// Created: 14.05.2019
// -----------------------------------------------------------------------------
// History of changes
// Date       |  Change                                            | Author
// -----------------------------------------------------------------------------
// 14.05.2019 | Creation                                           | Janssen
// 26.05.2019 | comments changed                                   | Janssen
// 31.07.2019 | attempt to do some real programming                | Janssen
// -----------------------------------------------------------------------------
// import org.eclipse.xtext.xbase.lib.Functions
// import org.eclipse.xtext.xbase.lib.Procedures // not needed ???


val DEPRESSURE_TIME = 10
val String LEVEL_EMPTY = "1"
val String SCRIPT_DIR="/home/pi/scripts/"

var String level = LEVEL_EMPTY
var irrigating = false

// use procedure since nothing is returned
val Procedures$Procedure0 onDepressureTimer = [ 
        logInfo("Depressure rule", "onDepressureTimer invoked")
        water_on_off.sendCommand("0")
        Valve_Switch.postUpdate(OFF)
]

val irrOnOffProc = [ 
    String onOff, String SCRIPT_DIR |
                 executeCommandLine(SCRIPT_DIR+"irrOnOff.sh"+"@@"+onOff, 10000)
                 logInfo("irrOnOffProc", " invoked irrOnOff with parameter " + onOff)
]

val Functions$Function0<String> readLevel = [ 
    
                  logInfo("Read level", "readLevel invoked")
                  var String level = executeCommandLine(SCRIPT_DIR+"Level.sh", 1000)
                  logInfo("Read level", "readLevel level = " + level)
                  return level
]

rule "Trigger irrigation pump"
  when Item Irr_Switch received command
  then
    var String rcv = receivedCommand.toString
    var String cmd = null
    
    
    if (rcv == ON){
        cmd = "1"
        irrigating = true
    } else if (receivedCommand == OFF) {
        cmd = "0"
        irrigating = false
    }
    logInfo("Trigger irrigation pump","received command = "+rcv+", cmd set to = "+cmd)

    logInfo("Trigger irrigation pump","irrigating set to " + irrigating)

    if(cmd !== null) 
    {
      irr_on_off.sendCommand(cmd)
    }
end

rule "Trigger water valve"
  when Item Valve_Switch received command
  then
    var String cmd = null
    switch(receivedCommand){
        case ON: cmd = "1"
        case OFF: cmd = "0"
        default: logError("water valve", "Do not know how to handle " + receivedCommand.toString)
    }

    if(cmd !== null) water_on_off.sendCommand(cmd)
end

rule "Fill barrel for next irrigation"
// finally invokes low level script 
// this script checks whether it makes sense to fill up the barrel (see /~pi/scripts/supply4NextIrrigation.sh )

  when Item Fill_Switch received command
  then
    //logInfo("FILL barrel rule", "received command = " + receivedCommand.toString)
    switch(receivedCommand){
        case ON: {
            logInfo("FILL barrel rule", "launching script supply4NextIrr...")
            // WORKING with water_on_off_script: 
            fill_barrel.sendCommand("1")
            // since fill_barrel measures level  irrigation might have stopped, so turn it on 
            // else leave it off 
                logInfo("Fill barrel for next irrigation","irrigating is " + irrigating)
        }

        // logInfo("FILL barrel rule", "script supply4NextIrr... executed")
        
        case OFF: fill_barrel.sendCommand("0")
        default: logError("FILL barrel", "I Do not know how to handle " + receivedCommand.toString)
    }
end

rule "Depressure"
// Takes away pressure from supply water hose
// This is done by turning on tap water for a few seconds, then turn off again 
// Even works when tap faucet is closed
// so all along the hose there will be less pressure

  when 
    Time cron "0 0/20 9-17 * * ?"
    //Time cron "0 0/2 9-20 * * ?"
  then
    logInfo("Depressure rule", "Cron event is due, start depressuring and timer") 
    var String isRaining = executeCommandLine("/home/pi/scripts/isRaining.sh", 1000)
    logInfo("Rule Depressure", "isRaining = " + isRaining)
    Valve_Switch.sendCommand(ON)
    water_on_off.sendCommand("1")


    createTimer (now.plusSeconds(DEPRESSURE_TIME), onDepressureTimer)
end

rule "Supervise irrigation state"
  // if someone left irrgation on although it was not supposed to 
  // -> turn OFF
  when 
    Time cron "0 0/5 * * * ?" // every minute check
  then
    if (irrigating) {
      logInfo("rule Supervise irrigation state", "found irrigation is active, so turn it ON")
      irrOnOffProc.apply("1", SCRIPT_DIR)
    }
end


rule "Irrigation ON"
// time based beginning of irrigation
  when
    //Time cron "0 0/2 * * * ? " or // near future test 
    Time cron "0 00 05 * * ? " or
    Time cron "0 00 06 * * ? " or 
    Time cron "0 00 18 * * ? " or
    Time cron "0 00 19 * * ? "  
  then
    // the following check actually should be done here but at present is done in low level bash script
    // if (isRaining || willRain) 
    // { 
    //     logInfo("Irrigation rule", "Cron event is due, start irrigation")
    // }
    
    logInfo("Irrigation ON rule", "Cron event is due, start irrigation")
    logInfo("Irrigation ON rule","irrigating set to " + irrigating)

    // first make sure barrel has enough water 
    // fill_barrel.sendCommand("1")
    // then irrigate
    Irr_Switch.sendCommand(ON)
    irr_on_off.sendCommand("1")
    irrigating = true
    sendMail("uwe@janssen-muenchen.de","Bewaesserung", "Bewaesserung: EIN \nWasserstand: "+level_out.state.toString)
    
end

rule "Irrigation OFF"
// time based ceasing of irrigation
  when
    //Time cron "0 1/2 * * * ? " or // near future test 
    Time cron "0 00 07 * * ? " or
    Time cron "0 00 20 * * ? " 
  then   
    logInfo("Irrigation OFF rule", "Cron event is due, stop irrigation")
    Irr_Switch.sendCommand(OFF)
    irr_on_off.sendCommand("0")
    irrigating = false
    sendMail("uwe@janssen-muenchen.de","Bewaesserung", "Bewaesserung: AUS \nWasserstand: "+level_out.state.toString)
end
