// Description: Rules for irrigation and water supply control 
// Author: Uwe Janssen
// Created: 14.05.2019
// -----------------------------------------------------------------------------
// History of changes
// Date       |  Change                                            | Author
// -----------------------------------------------------------------------------
// 14.05.2019 | Creation                                           | Janssen
// 26.05.2019 | comments changed                                   | Janssen
// 31.07.2019 | attempt to do some real programming                | Janssen
// 12.08.2019 | added rule for handling test mode                  | Janssen
// 20.08.2019 | added comments                                     | Janssen
// 04.09.2019 | improved control                                   | Janssen
// 20.04.2020 | lawn irrigation via valve implementation           | Janssen
// 26.06.2020 | improved lawn irrigation control                   | Janssen
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
//  imports
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
// constants
// -----------------------------------------------------------------------------
import java.time.format.DateTimeFormatter


var DEPRESSURE_TIME = 12
var LAWN_IRRIGATION_TIME = 60 // seconds
var MANUAL_IRRIGATION_TIME = 600 // seconds
//var MANUAL_IRRIGATION_TIME = 20 // for test
var String SCRIPT_DIR="/home/openhabian/scripts/"
var Timer valveTimer = null
var Timer irrTimer = null
val int SOIL_HUM_TRESHOLD = 550



// -----------------------------------------------------------------------------
//  Functions and procedures section
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
//  Function isLastLawnIrrigationCron
// (for the current day)
// -----------------------------------------------------------------------------

val Functions$Function0<Boolean> isLastLawnIrrigationCron = [ 
  // check if last cron for 
  // lawn irrigation
  // i.e. if current hour == last hour of range AND current minute == last minute of range
  // Calculation of last event is based upon cron entry "0 0/1 8-20 * 3-10 ?" 

  val hour = now.getHour
  val minute = now.getMinute
  
  val Boolean retVal = (hour ==  20 && minute == 59) // last occurrence 
  logDebug("isLastLawnIrrigationCron ", " hour = {}, minute = {}, retVal = {}" , hour, minute, retVal)
  return retVal
]


// -----------------------------------------------------------------------------
//  Function doLawnDespiteRain
// -----------------------------------------------------------------------------

val Functions$Function0<Boolean> shallDoLawnIrrigation = [ 
  // do the lawn when not raining OR will not rain OR ignore switch = ON
  val isRaining = isRaining_out.state.toString
  val Boolean switchStateSetToIgnore  = (IgnoreWeatherSwitch?.state == ON)   
  val Boolean isNotRaining = (isRaining == "0")
  val Number RAIN_TRESHOLD = 3.0
  val float comingRainVal  = (ForecastRainVolumesGroup?.state as DecimalType).floatValue
  val Boolean willNotRain = (comingRainVal < RAIN_TRESHOLD)    
  //logDebug("shallDoLawnIrrigation::","switchStateSetToIgnore = {} ",switchStateSetToIgnore)
  //logDebug("shallDoLawnIrrigation:","isNotRaining = {} ",isNotRaining)
  val Boolean retVal = (isNotRaining && willNotRain ) || switchStateSetToIgnore
  logDebug("shallDoLawnIrrigation:","return {}", retVal)
  return retVal
]
// -----------------------------------------------------------------------------
//  Timer onValveTimer
// -----------------------------------------------------------------------------

val Procedures$Procedure0 onValveTimer = [ 
        val irrigating = (Irrigating.state == ON)
        logDebug("Procedure onValveTimer", "ENTRY")
        water_on_off.sendCommand("0")
        Valve_Switch.postUpdate(OFF) // expires itself but late
        if (!irrigating) {
          logDebug("Procedure onValveTimer", "irrigating state = "+ irrigating+", turn power OFF")
          GardencontrolPowerSupply.sendCommand(OFF) // deactivate PowerSupply for pump and valve
          StatusText.sendCommand("Water Valve OFF")
        } else {
          logDebug("Procedure onValveTimer", "irrigating state = "+ irrigating+", leave power ON")
        }


        logDebug("Procedure onValveTimer", "EXIT") 
]

// -----------------------------------------------------------------------------
//  Timer onIrrigationTimer
// -----------------------------------------------------------------------------

val Procedures$Procedure0 onIrrigationTimer = [ 
        logDebug("Procedure onIrrigationTimer", "ENTRY")
        // turn irrigation off if time is due
        irr_on_off.sendCommand("0")
        Irr_Switch.postUpdate(OFF)
        Irrigating.postUpdate(OFF)
        GardencontrolPowerSupply.sendCommand(OFF) // deactivate PowerSupply for pump and valve
        GardencontrolPowerSupply.postUpdate(OFF) 
        logDebug("Procedure onIrrigationTimer", "EXIT") 
]

// -----------------------------------------------------------------------------
//  Procedure irrOnOffProc, turn on or off irrigation
// -----------------------------------------------------------------------------

val irrOnOffProc = [ 
    String onOff, String SCRIPT_DIR |
                executeCommandLine(Duration.ofSeconds(1), SCRIPT_DIR+"irrOnOff.sh",onOff)
                // OH2: executeCommandLine(SCRIPT_DIR+"irrOnOff.sh"+"@@"+onOff, 1000)
                logDebug("Procedure irrOnOffProc", "invoked irrOnOff with parameter " + onOff)
]


// -----------------------------------------------------------------------------
//  Manual irrigation with timeout
// -----------------------------------------------------------------------------

rule "Manual irrigation"
  when Item Irr_Switch received command
  then

    var String cmd = "0"
    Irrigating.postUpdate(OFF)
       
    switch (receivedCommand){
        case ON: {
          // always irrigate manually, do not care of the weather
            GardencontrolPowerSupply.sendCommand(ON)
            cmd = "1"
            Irrigating.postUpdate(ON)
            StatusText.postUpdate("Irrigation started")
            irrTimer = createTimer(now.plusSeconds(MANUAL_IRRIGATION_TIME), onIrrigationTimer)
        }
        case OFF: {
          if (irrTimer !== null && !irrTimer.hasTerminated) {
            irrTimer.cancel()
          }
          logDebug("Manual irrigation","irrigation OFF")
        }
        default: 
          logDebug("T","Manual irrigation: received command neither ON nor OFF")
    }

    logDebug("Manual irrigation","received command = "+receivedCommand+", cmd set to = "+cmd)
    logDebug("Manual irrigation","irrigating state set to " + Irrigating.state.toString)

    if(cmd !== null) 
    {
      irr_on_off.sendCommand(cmd)
    }
end

// -----------------------------------------------------------------------------
//  Manual fill barrel trigger
// -----------------------------------------------------------------------------

rule "Trigger water valve"
  when Item Valve_Switch received command
  then
    var String cmd = null
    logDebug("Trigger water valve","ENTRY, command = "+receivedCommand)
    switch(receivedCommand){
        case ON: {
          GardencontrolPowerSupply.sendCommand(ON) // activate PowerSupply for pump and valve
          water_on_off.sendCommand("1")
          // limit valve open time
          valveTimer = createTimer (now.plusSeconds(LAWN_IRRIGATION_TIME*5), onValveTimer)
        }
        case OFF:
        { 
          water_on_off.sendCommand("0")
          GardencontrolPowerSupply.sendCommand(OFF) // deactivate PowerSupply for pump and valve
          // if timer is still running: abort it
          if (valveTimer !== null && !valveTimer.hasTerminated) {
            valveTimer.cancel()
          }
        }
        default: logError("water valve", "Do not know how to handle " + receivedCommand.toString)
    }
    logDebug("Trigger water valve","state set to " + cmd)
    logDebug("Trigger water valve","EXIT")
end

rule "Enable Lawn irrigation"
when Item LawnIrrigationSwitch changed to ON
then
  LawnIrrigationTimeLeft.postUpdate(LawnIrrigationInterVal.state as Number)  
end
// -----------------------------------------------------------------------------
//  Individual irrigation by valve. 
//  NOTE: You need to swap water tap hose and lawn irrigation hose
// -----------------------------------------------------------------------------

// rule "Lawn irrigation"
// // Lawn irrigation

//   when 
//     //Time cron "0 0/1 22 * 3-10 ?"  // TEST
//     Time cron "0 0/1 8-20 * 3-8 ?"  
//   then
//     if (LawnIrrigationInterVal.state == NULL || LawnIrrigationInterVal.state == UNDEF) {
//             LawnIrrigationInterVal.postUpdate(10)
//     }
//     logDebug("Lawn irrigation","ENTRY LawnIrrigationInterVal = {}", LawnIrrigationInterVal) 
//     if (isLastLawnIrrigationCron.apply()) {
//       StatusText.sendCommand("LAST lawn irrigation cron executed")
//       // turn OFF everything
//       LawnIrrigationTimeLeft.sendCommand(-1)
//       water_on_off.sendCommand("0")
//       Valve_Switch?.sendCommand(OFF)
//       Valve_Switch.postUpdate(OFF)
//       IgnoreWeatherSwitch?.sendCommand(OFF)
//       IgnoreWeatherSwitch.postUpdate(OFF)
//       GardencontrolPowerSupply.sendCommand(OFF) // deactivate PowerSupply for pump and valve
//     } else {
//       val Boolean willDoLawn = ((LawnIrrigationSwitch?.state == ON) && shallDoLawnIrrigation.apply())
//       logDebug("Lawn irrigation","willDoLawn = {}", willDoLawn)
//       //StatusText.sendCommand("willDoLawn = "+willDoLawn)
//       val interval = LawnIrrigationInterVal.state
//       if (willDoLawn) {
//         // count down
//         var counterVal = LawnIrrigationTimeLeft.state as Number
//         LawnIrrigationTimeLeft.postUpdate(counterVal-1) // count down
//         logDebug("Lawn irrigation","counter =  {}", counterVal)
//         if (counterVal == 0 ) {
//           logDebug("Lawn irrigation","Mode = ON -> start Lawn irrigation") 
//           GardencontrolPowerSupply.sendCommand(ON) // activate PowerSupply for pump and valve
//           Thread::sleep(2000) // wait 2s
//           Valve_Switch.postUpdate(ON)
//           water_on_off.sendCommand("1")
//           // start over 
//           LawnIrrigationTimeLeft.sendCommand(interval-1) // for display
//           createTimer (now.plusSeconds(LAWN_IRRIGATION_TIME), onValveTimer)
//         }
//       } else {
//         LawnIrrigationTimeLeft.sendCommand(-1)
//       }
//     } // last cron ?
//     logDebug("Lawn irrigation","EXIT") 
//    end

// rule "Time Interval Changed" 
// when Item LawnIrrigationInterVal changed 
// then 
//     val interval = LawnIrrigationInterVal.state as Number
//     LawnIrrigationTimeLeft.sendCommand(interval)
// end

// rule "LawnIrrigationSwitch OFF" 
// when Item LawnIrrigationSwitch changed to OFF
// then 
//   LawnIrrigationTimeLeft.sendCommand(-1)
//   GardencontrolPowerSupply.postUpdate(OFF)
// end

// rule "LawnIrrigationSwitch ON" 
// when Item LawnIrrigationSwitch changed to ON
// then 
//   LawnIrrigationTimeLeft.sendCommand(LawnIrrigationInterVal.state as Number)
// end

//###############################################################################################################################
// needed if openweather tells it rains but actually does not.
// This way the user can 'overrride' the rain fact 
// but the interval has to set to a valid value
// otherwise the background process will count down starting from -1 to -2 and so on forever

rule "IgnoreWeatherSwitch ON" 
when Item IgnoreWeatherSwitch changed to ON
then 
  if (LawnIrrigationSwitch?.state == ON) {
    LawnIrrigationTimeLeft.sendCommand(LawnIrrigationInterVal.state as Number)
  }
end

// -----------------------------------------------------------------------------
//  Depressure task. Needed to take away pressure from the hose when exposed to the sun
// -----------------------------------------------------------------------------

rule "Depressure"
// Takes away pressure from supply water hose
// This is done by turning on tap water for a few seconds, then turn off again 
// Even works when faucet is closed
// so all along the hose there will be less pressure

  when 
    // Time cron "0 0/2 9-23 * * ?" // for TEST
    Time cron "0 3/10 9-17 * 5-6 ?" or
    Time cron "0 3/5 8-16 * 7-8 ?" or
    Time cron "0 3/10 17 * 7-8 ?" or
    Time cron "0 3/40 10-16 * 4,9 ?"

  then
    val cloudiness = LocalCurrentCloudiness?.state as Number
    logDebug("Depressure","ENTRY LocalCurrentCloudiness = {}", cloudiness) 
    StatusText.sendCommand("Cloudiness = "+cloudiness)
    val isRaining = (isRaining_out.state.toString == "1")
    logDebug("Depressure", "isRaining = {}", isRaining)
    
    if (cloudiness >= 0.75 || isRaining) {
      logDebug("Depressure","cloudiness more than {}% -> so relieving hose is not needed",cloudiness)
      logDebug("Depressure","LocalCurrentCloudiness = {}", cloudiness) 
      StatusText.sendCommand("No depressurizing - cloudiness = "+cloudiness+" or it'sraining")
    } else {
      logDebug("Depressure","cloudiness = {}, i.e. < 50% -> start depressurizing", cloudiness) 
      StatusText.sendCommand("Depressurizing due to cloudiness = "+cloudiness)
      GardencontrolPowerSupply.sendCommand(ON) // activate PowerSupply for pump and valve
      Thread::sleep(2000)
      Valve_Switch.postUpdate(ON)
      water_on_off.sendCommand("1")
      createTimer (now.plusSeconds(DEPRESSURE_TIME), onValveTimer)
    }
end

// -----------------------------------------------------------------------------
//  Background daemon for various tasks
// -----------------------------------------------------------------------------

// This rule serves as a steady bgackground task running periodically
rule "daemon"
  when 
    //Time cron "0 0/1 * * * ?" //near future test
    Time cron "0 5/10 * * * ?" // time spec for release edition: 5/10 means every 10 minutes 5 minutes after minutes % 10
    // e.g. 12, 22, 32, 42 etc.
  then
  
  val irrigating = (Irrigating.state == ON)
  logDebug("Daemon", "ENTRY, Irrigating.state = {}",Irrigating.state)
  
  
  // tell unix cronjob that openhab's cron is still working (otherwise we will not be here) via script set_alive.sh linked via item 
  Set_alive.sendCommand(ON)
  logDebug("Daemon", "updating set_alive file")
  // forward rain probability to MQTT item 
  logDebug("Daemon","ForecastRainVolumesGroup ( SUM )  = {} ",ForecastRainVolumesGroup.state.toString)
  var float comingRainVal  = (ForecastRainVolumesGroup.state as DecimalType).floatValue
  RainProb.sendCommand(comingRainVal)
  logDebug("Daemon","RainProb =  {} ",RainProb.state) 

 
  // *********************************************************************************************************************************************
  // NOTE: 
  // If we do not get here within ONE hour since the last Set_alive command something is wrong with openhab CRON and the computer will be restarted
  //
  // *********************************************************************************************************************************************

  val Boolean lawnIrrigatinMode  = (LawnIrrigationSwitch?.state == ON)

  // if someone ( e.g. low level script ) turned OFF irrigation inadvertedly
  // -> turn ON again 
  if (irrigating) {
      logDebug("Daemon","found irrigation is active, so turn or leave it ON")
      GardencontrolPowerSupply.sendCommand(ON) // activate PowerSupply for pump and valve
      if (irrigating) {
        Irr_Switch.postUpdate(ON)
        irrOnOffProc?.apply("1", SCRIPT_DIR)
      }
  } else {
      logDebug("Daemon","found irrigation is inactive, so turn or leave it OFF")
      irrOnOffProc?.apply("0", SCRIPT_DIR)
      if (!(lawnIrrigatinMode)) { // if not in lawn irrigation mode
          // save water: 
          water_on_off.sendCommand("0")
          GardencontrolPowerSupply.sendCommand(OFF)
          logDebug("Daemon","found irrigation is inactive, so I turned off tap water")
          //Valve_Switch?.sendCommand(OFF)
          //water_on_off?.sendCommand("0")
          //GardencontrolPowerSupply.sendCommand(OFF) // deactivate PowerSupply for pump and valve  
          //GardencontrolPowerSupply.postUpdate(OFF) 
          LawnIrrigationTimeLeft.sendCommand(-1)
      }
    }
      
    logDebug("Daemon","EXIT")
end

// -----------------------------------------------------------------------------
//  rule  "Test Mode Switch handling"
// -----------------------------------------------------------------------------

rule  "Test Mode Switch handling"
  when Item TestModeSwitch changed to ON 
  then 
    InitSwitch.postUpdate(OFF)
  end 

// -----------------------------------------------------------------------------
//  rule  "SysStart or InitSwitch"
// -----------------------------------------------------------------------------
rule "SysStart"
when 
  System started or
  Item InitSwitch changed to ON
then 
  logInfo("SysStart or InitSwitch","ENTRY")
  // createTimer(now.plusMinutes(2), [ |  //Give the system time to load up
  //       gWeatherItems.members.forEach[ i |
  //           if (i.state == NULL || i.state == UNDEF) i.postUpdate(0)
  //       ]
  //   ])
  SystemStatusText.sendCommand("System starting")
  // turn off hardware
  GardencontrolPowerSupply.sendCommand(OFF)
  irrOnOffProc?.apply("0", SCRIPT_DIR)
  // set to not raining
  isRaining_out.postUpdate("0")
  // no water pumping
  water_on_off.sendCommand("0")
  // reset graphical objects
  InitSwitch.sendCommand(OFF)
  Valve_Switch.sendCommand(OFF)
  Fill_Switch.sendCommand(OFF)
  FillTimerActive.sendCommand(OFF) 

  Display_level_out.sendCommand(0)
  // set some items to 0 
  gWeatherItems.members.forEach[ i |
            if (i.state == NULL || i.state == UNDEF) i.postUpdate(0)
  ]
  // toggle level update
  UpdateLevelSwitch.sendCommand(OFF)
  UpdateLevelSwitch.sendCommand(ON)

  Level_out.sendCommand("0")
  // make all fields visible
  TestModeSwitch.sendCommand(ON)
  GardencontrolPowerSupply.sendCommand(OFF)
  // set Irrigating flag to false
  Irrigating.postUpdate(OFF)
  LawnIrrigationTimeLeft.sendCommand(-1)
  LawnIrrigationInterVal.sendCommand(10)
  LawnIrrigationSwitch.postUpdate(OFF)
  LawnIrrigationSwitch.sendCommand(OFF)
  IgnoreWeatherSwitch.sendCommand(OFF)
  Irr_Switch.sendCommand(OFF)
  Irr_Switch.postUpdate(OFF)
  NoIrrigationPreset.sendCommand(OFF)
  // if (SunriseTopic != NULL)
  //  SunriseTopic.sendCommand(Sunrise_Time)
  // if (SunsetTopic != NULL)
  //   SunsetTopic.sendCommand(Sunset_Time)
  // if (MoonPhaseTopic != NULL)
  //  MoonPhaseTopic.sendCommand(MoonPhase)

  SystemStatusText.sendCommand("System started")
  SoilHumTreshold.sendCommand(SOIL_HUM_TRESHOLD)
  logInfo("SysStart or InitSwitch","EXIT")
end 
/*
 * 
 * Update Time for Solar Modules since they do not always send a proper time"
 *
 */
rule "SolarTimeUpdate"
when Member of gSolar3Data changed
then 
  val lastUpdate = now()
//  val DateTimeFormatter localFormatter = DateTimeFormatter.ISO_LOCAL_TIME
  val DateTimeFormatter localFormatter = DateTimeFormatter.ofPattern("HH:mm")
  val localTimeStr = lastUpdate.format(localFormatter)
  //logInfo("SolarTimeUpdate", "fmt time = "+ localTimeStr)
  Time_Solar3_OH.postUpdate(localTimeStr)
end 
