// Description: Rules for irrigation and water supply control 
// Author: Uwe Janssen
// Created: 14.05.2019
// -----------------------------------------------------------------------------
// History of changes
// Date       |  Change                                            | Author
// -----------------------------------------------------------------------------
// 14.05.2019 | Creation                                           | Janssen
// 26.05.2019 | comments changed                                   | Janssen
// 31.07.2019 | attempt to do some real programming                | Janssen
// 12.08.2019 | added rule for handling test mode                  | Janssen
// 20.08.2019 | added comments                                     | Janssen
// 04.09.2019 | improved control                                   | Janssen
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
//  imports
// -----------------------------------------------------------------------------

import java.util.Map

// -----------------------------------------------------------------------------
// constants
// -----------------------------------------------------------------------------

val DEPRESSURE_TIME = 5
val String SCRIPT_DIR="/home/pi/scripts/"


// -----------------------------------------------------------------------------
//  Functions and procedures section
// -----------------------------------------------------------------------------


// -----------------------------------------------------------------------------
//  Timer onDepressureTimer
// -----------------------------------------------------------------------------

val Procedures$Procedure0 onDepressureTimer = [ 
        val irrigating = (Irrigating.state == ON)
        logInfo("", "Procedure onDepressureTimer expired")
        water_on_off.sendCommand("0")
        if (!irrigating) {
          logInfo("", "Procedure onDepressureTimer, irrigating state = "+ irrigating+", turn power OFF")
          GardencontrolPowerSupply.sendCommand(OFF) // deactivate PowerSupply for pump and valve
        } else {
          logInfo("", "Procedure onDepressureTimer, irrigating state = "+ irrigating+", leave power ON")
        }

        Valve_Switch.postUpdate(OFF)
        logInfo("", "Procedure DepressureTimer EXIT") 
]

// -----------------------------------------------------------------------------
//  Procedure irrOnOffProc, turn on or off irrigation
// -----------------------------------------------------------------------------

val irrOnOffProc = [ 
    String onOff, String SCRIPT_DIR |
                 executeCommandLine(SCRIPT_DIR+"irrOnOff.sh"+"@@"+onOff, 1000)
                 logInfo("", "Procedure irrOnOffProc invoked irrOnOff with parameter " + onOff)
]


// -----------------------------------------------------------------------------
//  Manual irrigation
// -----------------------------------------------------------------------------

rule "Manual irrigation"
  when Item Irr_Switch received command
  then

    var String cmd = "0"
    Irrigating.postUpdate(OFF)
    // var String text = "ignored manual irrigation command = "+receivedCommand+" beacause of the weather"
       
    switch (receivedCommand){
        case ON: {
          // always irrigate manually, do not care of the weather
            GardencontrolPowerSupply.sendCommand(ON)
            cmd = "1"
            Irrigating.postUpdate(ON)
            StatusText.postUpdate("Irrigation started")
        }
        case OFF: {
          logInfo("","Manual irrigation: irrigation OFF")
        }
        default: 
          logInfo("T","Manual irrigation: received command neither ON nor OFF")
    }

    logInfo("","Manual irrigation: received command = "+receivedCommand+", cmd set to = "+cmd)
    logInfo("","Manual irrigation: irrigating state set to " + Irrigating.state.toString)

    if(cmd !== null) 
    {
      irr_on_off.sendCommand(cmd)
    }
end

// -----------------------------------------------------------------------------
//  Manual fill barrel trigger
// -----------------------------------------------------------------------------

rule "Trigger water valve"
  when Item Valve_Switch received command
  then
    var String cmd = null
    logInfo("","Trigger water valve: ENTRY, command = "+receivedCommand)
    switch(receivedCommand){
        case ON: {

          GardencontrolPowerSupply.sendCommand(ON) // activate PowerSupply for pump and valve
          water_on_off.sendCommand("1")
        }
        case OFF:
        { 
          water_on_off.sendCommand("0")
          GardencontrolPowerSupply.sendCommand(OFF) // deactivate PowerSupply for pump and valve
        }
        default: logError("water valve", "Do not know how to handle " + receivedCommand.toString)
    }
    logInfo("","Trigger water valve: state set to " + cmd)
    logInfo("","Trigger water valve: EXIT")
end


// -----------------------------------------------------------------------------
//  Depressure task. Needed to take away pressure from the hose when exposed to the sun
// -----------------------------------------------------------------------------

rule "Depressure"
// Takes away pressure from supply water hose
// This is done by turning on tap water for a few seconds, then turn off again 
// Even works when faucet is closed
// so all along the hose there will be less pressure

  when 
    //Time cron "0 0/2 9-23 * * ?" // for TEST
    // TODO: adapt to seasonal sun radiation
    Time cron "0 3/10 9-17 * 5-8 ?" or
    Time cron "0 3/40 9-17 * 4,9 ?"

  then
    val cloudiness = LocalCurrentCloudiness.state as Number
    logInfo("", "Depressure: ENTRY LocalCurrentCloudiness = {}", cloudiness) 
    StatusText.sendCommand("Depr since cloudiness = "+cloudiness)
    if (cloudiness >= 0.5) {
      logInfo("", "Depressure: cloudiness more than {}% -> so relieving hose is not needed",cloudiness)
      logInfo("", "Depressure: LocalCurrentCloudiness = {}", cloudiness) 
    } else {
      logInfo("", "Depressure: cloudiness = {}, i.e. < 50% -> start depressurizing", cloudiness) 
      GardencontrolPowerSupply.sendCommand(ON) // activate PowerSupply for pump and valve
      Thread::sleep(2000)
      Valve_Switch.postUpdate(ON)
      water_on_off.sendCommand("1")
      createTimer (now.plusSeconds(DEPRESSURE_TIME), onDepressureTimer)
    }
end

// -----------------------------------------------------------------------------
//  Background daemon for various tasks
// -----------------------------------------------------------------------------

// This rule serves as a steady bgackground task running all five minutes
rule "daemon"
  when 
    //Time cron "0 0/1 * * * ?" //near future test
    Time cron "0 1/5 * * * ?" // every 5 minutes check
  then
  val irrigating = (Irrigating.state == ON)

  logInfo("","Daemon: ENTRY ForecastRainVolumesGroup ( SUM )  = {} ",ForecastRainVolumesGroup.state.toString)
    
  // if someone ( e.g. low level script ) turned OFF irrigation inadvertedly
  // -> turn ON again 
  if (irrigating) {
      logInfo("", "Daemon: found irrigation is active, so turn or leave it ON")
      GardencontrolPowerSupply.sendCommand(ON) // activate PowerSupply for pump and valve
      irrOnOffProc?.apply("1", SCRIPT_DIR)
  } else {
      logInfo("", "Daemon: found irrigation is inactive, so turn or leave it OFF")
      irrOnOffProc?.apply("0", SCRIPT_DIR)
      GardencontrolPowerSupply.sendCommand(OFF) // deactivate PowerSupply for pump and valve
  }
  // save water: 
  // never let tap water run for more than daemon run time interval (see above)
  Valve_Switch?.sendCommand(OFF)
  water_on_off?.sendCommand("0")
  logInfo("","Daemon: EXIT")
end





// -----------------------------------------------------------------------------
//  rule  "Test Mode Switch handling"
// -----------------------------------------------------------------------------

rule  "Test Mode Switch handling"
  when Item TestModeSwitch changed to ON 
  then 
    InitSwitch.postUpdate(OFF)
  end 

// -----------------------------------------------------------------------------
//  rule  "SysStart or InitSwitch"
// -----------------------------------------------------------------------------
rule "SysStart"
when 
  System started                 or
  Item InitSwitch changed to ON
then 
  logInfo("", "SysStart or InitSwitch: ENTRY")
  // turn off hardware
  GardencontrolPowerSupply.sendCommand(OFF)
  irrOnOffProc?.apply("0", SCRIPT_DIR)
  water_on_off.sendCommand("0")
  // reset graphical objects
  InitSwitch.sendCommand(OFF)
  Irr_Switch.sendCommand(OFF)
  Valve_Switch.sendCommand(OFF)
  Fill_Switch.sendCommand(OFF)
  FillTimerActive.sendCommand(OFF) 

  Display_level_out.sendCommand("0")
  UpdateLevelSwitch.sendCommand(OFF)
  StatusText.sendCommand("System started")

  Level_out.sendCommand("0")
  // make all fields visible
  TestModeSwitch.sendCommand(ON)
  GardencontrolPowerSupply.sendCommand(OFF)
  // set Irrigating flag to false
  Irrigating.postUpdate(OFF)
  logInfo("", "SysStart or InitSwitch: EXIT")
end 

// -----------------------------------------------------------------------------
// rule "SysStop" 
// -----------------------------------------------------------------------------

rule "SysStop"
when System shuts down

then
    InitSwitch.sendCommand(ON)
    logInfo("", "SysStop: system shutting down")

end
