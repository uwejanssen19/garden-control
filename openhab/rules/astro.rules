// this procedure is now part of the UI rule asto event JS
// val makeAstroEventHumanReadable = [ 
//   String pEventString |
//   val String astroMapFile = "astroevents.map"
//   // Format of event : 
//   //   astro:sun:local:morningNight#event triggered START
//   //   [0]  :[1]:[2] :[3]
//   logInfo("","makeAstroEventHumanReadable::pEventString = {}", pEventString)
//   // find last chunk separated by ':'
//   val astroParts = pEventString.split(":")
//   // now we got "<eventName>#event triggered START|END"
//   // split again and keep first part reusing array
//   logInfo("","makeAstroEventHumanReadable::astroParts[3] = {}", astroParts.get(3))
//   val astroParts2 = astroParts.get(3).split("#")
//   val String eventName = astroParts2.get(0)
//   logInfo("","makeAstroEventHumanReadable::eventName = {}", eventName)

//   //val remainder /*e.g. event triggered START*/ = astroParts2.get(1)
//   //val startEndParts = remainder.split(' ')  // create list with parts event trig START/END
//   //val startEnd = startEndParts.get(2) // obtain last
//   //logInfo("","makeAstroEventHumanReadable::startEnd = {}", startEnd)
//   //val startEndConv = transform("MAP", astroMapFile,startEnd) // translate into German

//   //logInfo("","makeAstroEventHumanReadable::startEndConv = {}", startEndConv)
// //  val String userFriendlyName = transform("MAP",astroMapFile,eventName) + " " + startEndConv
//   val String userFriendlyName = transform("MAP",astroMapFile,eventName)
//   logInfo("","makeAstroEventHumanReadable::userFriendlyName = {}", userFriendlyName)
//   return userFriendlyName
// ]

val Procedures$Procedure0 updateAstroData = [ 
  val String fmtTime = "%1$tH:%1$tM"
  val String fmtDegree = "%1$.2f"
  logInfo("","PUBLISHING ASTRO Values, e.g. Azimuth = {}", Azimuth)
//   logInfo("","astro values elevation = {}", Elevation)
//   logInfo("","astro values MoonDistance = {}", MoonDistance)
//   logInfo("","astro values MoonPhase = {}", MoonPhase)
  val mqttActions = getActions("mqtt","mqtt:broker:myUnsecureBroker")
  val moonphase_val = MoonPhase.state.toString
  val sunrise_val = (Sunrise_Time.state as DateTimeType).format(fmtTime)
  val sunset_val = (Sunset_Time.state as DateTimeType).format(fmtTime)
  val moonrise_val = (MoonRise.state as DateTimeType).format(fmtTime)
  val moonset_val = (MoonSet.state as DateTimeType).format(fmtTime)
  val azimut_val = (Azimuth.state).format(fmtDegree)
  val elevation_val = (Elevation.state).format(fmtDegree)
//  val foreCast_val = localHourlyForecast12Condition.state.toString 
  val foreCast_val = "pseudostring " // exchange with previous line if error "f != java.lang.String" still sucks

 // calculate moon phase
 // 0=NEW, 1=WAXING_CRESCENT, 2=FIRST_QUARTER, 3=WAXING_GIBBOUS, 4=FULL, 5=WANING_GIBBOUS, 6=THIRD_QUARTER, 7=WANING_CRESCENT
  // val moonphase_number = transform("MAP", "moonphase_to_display.map",moonphase_val)
  //  logInfo("","PUBLISHING ASTRO Values, moonphase = {}, number = {}", moonphase_val, moonphase_number)
  //  mqttActions.publishMQTT("moonphase",moonphase_number,true)
  //  mqttActions.publishMQTT("sunrise",sunrise_val,true)
  //  mqttActions.publishMQTT("sunset",sunset_val,true)
  //  mqttActions.publishMQTT("azimut",azimut_val,true)
  //  mqttActions.publishMQTT("elevation",elevation_val,true)
  //  mqttActions.publishMQTT("distance",MoonDistance.state.toString,true)
  //  mqttActions.publishMQTT("moonrise",moonrise_val,true)
  //  mqttActions.publishMQTT("moonset",moonset_val,true)
  //  mqttActions.publishMQTT("astrotimestamp",new DateTimeType().format("%1$tH:%1$tM"),true)
  //  //logInfo("","updateAstro() SunCulm = {}", SunCulm1.state)
  //  mqttActions.publishMQTT("sunculm",SunCulm1.state.format(fmtDegree),true)
  //  mqttActions.publishMQTT("forecast",foreCast_val,true)

]

rule "noon" 
when 
  Channel "astro:sun:local:noon#event" triggered START
then
  val Number elevationNumber = Elevation.state
//  val Number elevationNumber = 39.43685692371896
  logInfo("","rule NOON SunCulm1 = {}", elevationNumber) 
  SunCulm1.postUpdate(elevationNumber)
  //SunCulm1.postUpdate(28.344169152600987) // test only
  updateAstroData.apply()
end

// rule moved to astro event JS rule in OH 3 UI (stored and maintained in jsondb and also in automation/jsr223/astro.js )
// rule "Use Update Level for Astro Data Update"
// when 
//   Item UpdateLevelSwitch changed
// then 
//     updateAstroData.apply()
// end

// rule "astro event DSL rule"
// when 
//   Channel "astro:sun:local:night#event" triggered START 
// or   Channel "astro:sun:local:daylight#event" triggered START
// or   Channel "astro:sun:local:morningNight#event" triggered START

// or   Channel "astro:sun:local:astroDawn#event" triggered START //
// or   Channel "astro:sun:local:nauticDawn#event" triggered START //
// or   Channel "astro:sun:local:civilDawn#event" triggered START //

// or   Channel "astro:sun:local:rise#event" triggered START //
// or   Channel "astro:sun:local:noon#event" triggered START //
// or   Channel "astro:sun:local:set#event" triggered START // 

// or   Channel "astro:sun:local:civilDusk#event" triggered START 
// or   Channel "astro:sun:local:nauticDusk#event" triggered START 
// or   Channel "astro:sun:local:astroDusk#event" triggered START 

// or   Channel "astro:sun:local:eveningNight#event" triggered START 
 

// then 

//     logInfo("","do NOTHING ############")
//     return;
//     logInfo("","receivedEvent {} detected at  {}", receivedEvent, now)
    
//     val convertedEvent = makeAstroEventHumanReadable.apply(receivedEvent)
//     //logInfo("","convertedEvent = {}", convertedEvent)
//     LastEvent.postUpdate(convertedEvent)
//     val mqttActions = getActions("mqtt","mqtt:broker:myUnsecureBroker")
//     mqttActions.publishMQTT("astroevent",convertedEvent,true)
// end 
// /*

// var logger = (logger === undefined) ? Java.type("org.slf4j.LoggerFactory").getLogger("org.openhab.model.script.rules_tools.Time of Day") : logger;

// var timeOfDay = context.getAttribute("triggeringItem").toString().split("_")[1];
// logger.info("Transitioning to " + timeOfDay);
// events.sendCommand("TimeOfDay_Example", timeOfDay);
// */