val makeAstroEventHumanReadable = [ 
  String pEventString |
  val String astroMapFile = "astroevents.map"
  // Format of event : 
  //   astro:sun:home:morningNight#event triggered START
  //   [0]  :[1]:[2] :[3]
  //logInfo("","makeAstroEventHumanReadable::pEventString = {}", pEventString)
  // find last chunk separated by ':'
  val astroParts = pEventString.split(":")
  // now we got "<eventName>#event triggered START|END"
  // split again and keep first part reusing array
  //logInfo("","makeAstroEventHumanReadable::astroParts[3] = {}", astroParts.get(3))
  val astroParts2 = astroParts.get(3).split("#")
  val String eventName = astroParts2.get(0)
  //logInfo("","makeAstroEventHumanReadable::eventName = {}", eventName)

  val remainder /*e.g. event triggered START*/ = astroParts2.get(1)
  val startEndParts = remainder.split(' ')  // create list with parts event trig START/END
  val startEnd = startEndParts.get(2) // obtain last
  //logInfo("","makeAstroEventHumanReadable::startEnd = {}", startEnd)
  val startEndConv = transform("MAP", astroMapFile,startEnd) // translate into German

  //logInfo("","makeAstroEventHumanReadable::startEndConv = {}", startEndConv)
  val String userFriendlyName = transform("MAP",astroMapFile,eventName) + " " + startEndConv
  //logInfo("","makeAstroEventHumanReadable::userFriendlyName = {}", userFriendlyName)
  return userFriendlyName
]

val Procedures$Procedure0 updateAstroData = [ 
  val String fmtTime = "%1$tH:%1$tM"
  val String fmtDegree = "%1$.2f"
  logInfo("","PUBLISHING ASTRO Values, e.g. Azimuth = {}", Azimuth)
//   logInfo("","astro values elevation = {}", Elevation)
//   logInfo("","astro values MoonDistance = {}", MoonDistance)
//   logInfo("","astro values MoonPhase = {}", MoonPhase)
  val mqttActions = getActions("mqtt","mqtt:broker:myUnsecureBroker")
  val moonphase_val = MoonPhase.state.toString
  val sunrise_val = (Sunrise_Time.state as DateTimeType).format(fmtTime)
  val sunset_val = (Sunset_Time.state as DateTimeType).format(fmtTime)
  val moonrise_val = (MoonRise.state as DateTimeType).format(fmtTime)
  val moonset_val = (MoonSet.state as DateTimeType).format(fmtTime)
  val azimut_val = (Azimuth.state).format(fmtDegree)
  val elevation_val = (Elevation.state).format(fmtDegree)
  val foreCast_val = localHourlyForecast12Condition.state.toString

 // calculate moon phase
 // 0=NEW, 1=WAXING_CRESCENT, 2=FIRST_QUARTER, 3=WAXING_GIBBOUS, 4=FULL, 5=WANING_GIBBOUS, 6=THIRD_QUARTER, 7=WANING_CRESCENT
 val moonphase_number = transform("MAP", "moonphase_to_display.map",moonphase_val)
   logInfo("","PUBLISHING ASTRO Values, moonphase = {}, number = {}", moonphase_val, moonphase_number)
   mqttActions.publishMQTT("moonphase",moonphase_number,false)
   mqttActions.publishMQTT("sunrise",sunrise_val,false)
   mqttActions.publishMQTT("sunset",sunset_val,false)
   mqttActions.publishMQTT("azimut",azimut_val,false)
   mqttActions.publishMQTT("elevation",elevation_val,false)
   mqttActions.publishMQTT("distance",MoonDistance.state.toString,false)
   mqttActions.publishMQTT("moonrise",moonrise_val,false)
   mqttActions.publishMQTT("moonset",moonset_val,false)
   mqttActions.publishMQTT("astrotimestamp",new DateTimeType().format("%1$tH:%1$tM"),false)
   logInfo("","updateAstro() SunCulm = {}", SunCulm1.state)
   mqttActions.publishMQTT("sunculm",SunCulm1.state.format(fmtDegree),false)
   mqttActions.publishMQTT("forecast",foreCast_val,false)

]

rule "astro update" // (used for checking astro values)" 
when
 //Time cron "0 0/1 * * * ?" // time spec for future test
   Time cron "0 0/30 * * * ?" // time spec for release edition
then
  logInfo("","invoking updateAstroData")
  updateAstroData.apply()  
end

rule "noon" 
when 
  Channel "astro:sun:home:noon#event" triggered START
then
  val Number elevationNumber = Elevation.state
//  val Number elevationNumber = 39.43685692371896
  logInfo("","rule NOON SunCulm1 = {}", elevationNumber) 
  SunCulm1.postUpdate(elevationNumber)
  updateAstroData.apply()
end

rule "Use Update Level for Astro Data Update"
when 
  Item UpdateLevelSwitch received command
then 
    updateAstroData.apply()
end


rule "astro event"
when 
  Channel "astro:sun:home:night#event" triggered START or
  Channel "astro:sun:home:daylight#event" triggered START or
  Channel "astro:sun:home:morningNight#event" triggered START or

  Channel "astro:sun:home:astroDawn#event" triggered START or
  Channel "astro:sun:home:nauticDawn#event" triggered START or
  Channel "astro:sun:home:civilDawn#event" triggered START or

  Channel "astro:sun:home:rise#event" triggered START or
  Channel "astro:sun:home:noon#event" triggered START or

  Channel "astro:sun:home:civilDusk#event" triggered START or
  Channel "astro:sun:home:nauticDusk#event" triggered START or
  Channel "astro:sun:home:astroDusk#event" triggered START or

  Channel "astro:sun:home:eveningNight#event" triggered START or
  Channel "astro:sun:home:set#event" triggered START or


  Channel "astro:sun:home:night#event" triggered END or
  Channel "astro:sun:home:daylight#event" triggered END or
  Channel "astro:sun:home:morningNight#event" triggered END or

  Channel "astro:sun:home:astroDawn#event" triggered END or
  Channel "astro:sun:home:nauticDawn#event" triggered END or
  Channel "astro:sun:home:civilDawn#event" triggered END or

  Channel "astro:sun:home:rise#event" triggered END or
  Channel "astro:sun:home:noon#event" triggered END or

  Channel "astro:sun:home:civilDusk#event" triggered END or
  Channel "astro:sun:home:nauticDusk#event" triggered END or
  Channel "astro:sun:home:astroDusk#event" triggered END or

  Channel "astro:sun:home:eveningNight#event" triggered END or
  Channel "astro:sun:home:set#event" triggered END 

then 
    //logInfo("","event {} detected at  {}", receivedEvent, now)
    val convertedEvent = makeAstroEventHumanReadable.apply(receivedEvent.toString)
    //logInfo("","convertedEvent = {}", convertedEvent)
    LastEvent.postUpdate(convertedEvent)
    val mqttActions = getActions("mqtt","mqtt:broker:myUnsecureBroker")
    mqttActions.publishMQTT("astroevent",convertedEvent,false)
end 
