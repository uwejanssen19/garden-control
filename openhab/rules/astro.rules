val Procedures$Procedure0 updateAstroData = [ 
  val String fmtString = "%1$tH:%1$tM"
   logInfo("","PUBLISHING ASTRO Values, e.g. Azimuth = {}", Azimuth)
//   logInfo("","astro values elevation = {}", Elevation)
//   logInfo("","astro values MoonDistance = {}", MoonDistance)
//   logInfo("","astro values MoonPhase = {}", MoonPhase)
  val mqttActions = getActions("mqtt","mqtt:broker:myUnsecureBroker")
  val moonphase_val = MoonPhase.state.toString
  val sunrise_val = (Sunrise_Time.state as DateTimeType).format(fmtString)
  val sunset_val = (Sunset_Time.state as DateTimeType).format(fmtString)
  val moonrise_val = (MoonRise.state as DateTimeType).format(fmtString)
  val moonset_val = (MoonSet.state as DateTimeType).format(fmtString)

 // calculate moon phase
 // 0=NEW, 1=WAXING_CRESCENT, 2=FIRST_QUARTER, 3=WAXING_GIBBOUS, 4=FULL, 5=WANING_GIBBOUS, 6=THIRD_QUARTER, 7=WANING_CRESCENT
 val moonphase_number = transform("MAP", "moonphase_to_display.map",moonphase_val)
   logInfo("","PUBLISHING ASTRO Values, moonphase = {}, number = {}", moonphase_val, moonphase_number)
   mqttActions.publishMQTT("moonphase",moonphase_number,false)
   mqttActions.publishMQTT("sunrise",sunrise_val,false)
   mqttActions.publishMQTT("sunset",sunset_val,false)
   mqttActions.publishMQTT("azimut",Azimuth.state.toString,false)
   mqttActions.publishMQTT("elevation",Elevation.state.toString,false)
   mqttActions.publishMQTT("distance",MoonDistance.state.toString,false)
   mqttActions.publishMQTT("moonrise",moonrise_val,false)
   mqttActions.publishMQTT("moonset",moonset_val,false)

]

rule "astro update" // (used for checking astro values)" 
when
// Time cron "0 0/5 * * * ?" // time spec for future test
    Time cron "0 0/15 * * * ?" // time spec for release edition = 1 HOUR 
then
  updateAstroData.apply()  
end


rule "Use Update Level for Astro Data Update"
when 
  Item UpdateLevelSwitch received command
then 
    updateAstroData.apply()
end


