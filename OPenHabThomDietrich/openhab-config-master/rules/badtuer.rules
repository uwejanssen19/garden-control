import org.joda.time.DateTime
import org.joda.time.Minutes

val String filename = "badtuer.rules"

// Timer für das automatische Ausschalten
var int badlicht_timer_minutes = 30
var boolean badlicht_on_by_rule = false

rule "Badtür-Automatik: Init"
when
    System started
then
    createTimer(now.plusSeconds(10)) [|
        if (BD_Deckenlicht_TimerActive.state == NULL) BD_Deckenlicht_TimerActive.postUpdate(OFF)
    ]
end

rule "Badtür-Automatik: Duration Update"
when
    Time cron "0 * * * * ?"
then
    if (BD_Deckenlicht_TimerActive.state == ON) {
        //logInfo(filename, "Deckenlicht Timer, minütliches Update")
        var DateTime deadline = new DateTime((BD_Deckenlicht_TimerEnd.state as DateTimeType).calendar)
        var int countdown = Minutes.minutesBetween(now, deadline).getMinutes() + 1
        BD_Deckenlicht_TimerDuration.postUpdate(countdown)
        //logInfo(filename, "Deckenlicht Timer, Deadline: " + deadline + ", Duration: " + countdown)
        if (countdown == 0) {
            BD_Deckenlicht_TimerActive.postUpdate(OFF)
            logInfo(filename, "Bad Deckenlicht Timer abgelaufen, Deckenlicht aus.")
            BD_Deckenlicht.sendCommand(OFF)
        }
    }
end

rule "Badtür-Automatik: Tuersensor schaltet Deckenlicht"
when
    Item BD_Tuer_State changed from CLOSED to OPEN
then
    //logInfo (filename, "Türsensor ausgelöst.")
    if (Night_State.state == ON && Rule_BD_Door_Light.state == ON) {
        if (BD_Deckenlicht.state == OFF) {
            BD_Deckenlicht.sendCommand(ON)
            badlicht_on_by_rule = true
            logInfo(filename, "Bad Türsensor schaltet Deckenlicht ein, startet Timer.")

            var DateTime deadline = now.plusSeconds(badlicht_timer_minutes * 60)
            BD_Deckenlicht_TimerEnd.postUpdate(new DateTimeType(deadline.toCalendar(null)))
            BD_Deckenlicht_TimerActive.postUpdate(ON)
        } else {
            if (BD_Deckenlicht_TimerActive.state != ON) {
                // light not turned on by door sensor -> no timer
                //logInfo(filename, "Bad Deckenlicht bereits dauerhaft an, keine Aktion.")
            } else {
                // extend deadline
                var DateTime deadline = now.plusSeconds(badlicht_timer_minutes * 60)
                BD_Deckenlicht_TimerEnd.postUpdate(new DateTimeType(deadline.toCalendar(null)))
                logInfo(filename, "Bad Türsensor, verlängert Timer.")
            }
        }
    }
end

rule "Badtür-Automatik: Lichtschalter überschreibt"
when
    Item BD_Deckenlicht changed
then
    //logInfo (filename, "BD Tastendruck")
    if (badlicht_on_by_rule) {
        //logInfo (filename, "Bad Tastendruck durch Regel erzeugt, ignoriere...")
        badlicht_on_by_rule = false
    } else if (BD_Deckenlicht_TimerActive.state == ON) {
        BD_Deckenlicht_TimerActive.postUpdate(OFF)
        logInfo (filename, "Bad Tastendruck löscht laufenden Timer.")
    }
    // schalten des Lichts geschieht bei diesem Schaltelement automatisch
end

// vim: syntax=Xtend
