
val String filename = "sonoff.rules"

val sonoff_device_ids = newArrayList(
    "sonoff-CBF6BE",
    "sonoff-96504C",
    "sonoff-A00F9D",
    "sonoff-9F3BD8",
    "sonoff-E8A6E4",
    "sonoff-20DCAE"
)

rule "Sonoff init"
when
    System started
then
    createTimer(now.plusSeconds(195)) [|
        if (KU_KuehlschrankTemp_Summary.state == NULL || KU_KuehlschrankTemp_Summary.state == "") KU_KuehlschrankTemp_Summary.postUpdate("(unbekannt) ⁉")
    ]
end

rule "Sonoff Maintenance"
when
    Item Sonoff_Action received command
then
    logInfo(filename, "Sonoff Maintenance on all devices: " + receivedCommand)
    
    for (String device_id : sonoff_device_ids) {
        switch (receivedCommand) {
            case "restart" : {
                publish("broker", "cmnd/" + device_id + "/restart", "1")
              }
            case "queryFW" : {
                publish("broker", "cmnd/" + device_id + "/status", "2")
            }
              case "upgradeFW" : {
                  publish("broker", "cmnd/" + device_id + "/otaurl", "http://sonoff.maddox.co.uk/tasmota/sonoff.ino.bin")
                publish("broker", "cmnd/" + device_id + "/upgrade", "1")
            }
        }
    }
    Sonoff_Action.postUpdate(NULL)
end


rule "Sonoff Kuehlschrank Summary"
when
    Item KU_KuehlschrankTemp_Kuehl changed or
    Item KU_KuehlschrankTemp_Gefrier changed
then
    KU_KuehlschrankTemp_Summary.postUpdate(String::format("%s °C / %s °C", KU_KuehlschrankTemp_Kuehl.state, KU_KuehlschrankTemp_Gefrier.state))
end

// vim: syntax=Xtend
